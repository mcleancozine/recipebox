A project to help me learn Rust.

The goal is to create an application that stores recipes. Users should be able to search recipes by ingredient, name, origin, and more.

Eventually, I would like to turn this into a web application, using Rust crates for PostgreSQL, asynchronous servers, and more, in order to learn about those things as well. If I get to that stage of the project, I would also like to learn Svelte for the web frontend.

As a starting point, I am going to design a CLI that takes and stores a recipe name, origin, and list of ingredient names. Users should then be able to search their stored recipes by name, origin, or ingredient. 

Design decisions:
- Use the clap crate for command line parsing due to its popularity
    - use this to parse the args into a struct
- Allow recipe name and source to be passed as arguments, but don't require it
    - if passed, they must not be empty
- Require recipes to have a name and a source
    - if none passed in as args, prompt for them at the terminal
- Structure recipes as a struct with getter and setter methods for data
    - keep the internal info private, while allowing manipulation of the recipe
- Store ingredients in a recipe as a HashSet of strings
    - each ingredient only needs to exist once in a recipe
- Use log and env_logger crates for logging
    - log the user's inputs using this for debugging purposes
- Use dialoguer crate for terminal prompts
- Have a lib and bin crate
- Break all logic out of the main() function to keep it modular
- Use assert_cmd and predicates crates for integration testing

What is happening:
1. The main function takes recipe name and source as CLI arguments
2. It creates a new Recipe with the given name and then adds the source to it

Todo/think about:
make sure that when prompted, name and source aren't empty
figure out getting ingredients into recipes
